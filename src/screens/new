import React, {
  Component,
  useEffect,
  useState,
  useRef,
  useCallback,
} from 'react';
import {
  View,
  Text,
  StyleSheet,
  StatusBar,
  FlatList,
  Dimensions,
  Platform,
  Animated,
  Image,
} from 'react-native';
import * as actions from '../store/actions/venueGet';
import {connect} from 'react-redux';
import MapView, {Marker, PROVIDER_GOOGLE} from 'react-native-maps';
import {
  responsiveWidth,
  responsiveScreenHeight,
  responsiveFontSize,
} from 'react-native-responsive-dimensions';
import Card from '../components/Card';
import Loader from '../components/Loader';
const {width, height} = Dimensions.get('window');
const SPACING = 10;
const ITEM_SIZE = Platform.OS === 'ios' ? width * 0.72 : width * 0.74;
const EMPTY_ITEM_SIZE = (width - ITEM_SIZE) / 2;
const BACKDROP_HEIGHT = height * 0.65;

const MapScreen = ({venueGet, venueSet}) => {
  const [page, onChangePage] = useState(1);
  const [loader, onChangeLoader] = useState(false);
  const [currentSectionIndex, setCurrentSectionIndex] = useState(0);
  const flatListRef = useRef(null);
  const mapRef = useRef(null);
  const scrollX = React.useRef(new Animated.Value(0)).current;
  let mapIndex = 0;
  let mapAnimation = new Animated.Value(0);
  const [region, onChangeRegion] = useState({
    latitude: 25.324117,
    longitude: 55.4048353,
  })
  useEffect(() => {
    onChangeLoader(true);
    venueGet(page).then(() => {
      onChangeLoader(false);
    });
  }, []);

    useEffect(() => {
    if (mapRef.current) {
      // list of _id's must same that has been provided to the identifier props of the Marker
      mapRef.current.fitToSuppliedMarkers(venueSet?.results?.map(({ _id }) => _id));
    }
  }, [venueSet?.results]);

  const onScroll = useCallback(({viewableItems}) => {
    console.log(viewableItems[0]?.item?.name);
    // onChangeRegion({
    //   latitude: viewableItems[0]?.item?.lat,
    // longitude: viewableItems[0]?.item?.lon,
    // })
  }, []);

  const renderItem = useCallback(
    ({item, index}) => (
      <Card
        index={index}
        data={item}
        image={item?.featured_image}
        lat={item?.lat}
        long={item?.lon}
        thumbnail={item?.thumbnail}
        scrollX={scrollX}
      />
    ),
    [],
  );

  if (loader) {
    return <Loader />;
  }

  function onRegionChange(coord) {
    console.log(coord, 'coordcoordcoord');
  }

  const interpolations = venueSet?.results?.map((marker, index) => {
    const inputRange = [
      (index - 1) * ITEM_SIZE,
      index * ITEM_SIZE,
      (index + 1) * ITEM_SIZE,
    ];

    const scale = mapAnimation.interpolate({
      inputRange,
      outputRange: [1, 1.5, 1],
      extrapolate: 'clamp',
    });

    return {scale};
  });

  function markerView() {
    venueSet?.results?.map((marker, index) => {
      const scaleStyle = {
        transform: [
          {
            scale: interpolations[index].scale,
          },
        ],
      };
      return (
        <MapView.Marker
          key={index}
          coordinate={marker.coordinate}
          onPress={e => onMarkerPress(e)}>
          <Animated.View style={[styles.markerWrap]}>
            <Animated.Image
              source={require('./../assets/pin.png')}
              style={[styles.marker, scaleStyle]}
              resizeMode="cover"
            />
          </Animated.View>
        </MapView.Marker>
      );
    });
  }



  return (
    <View style={styles.container}>
      <StatusBar
        backgroundColor={'transparent'}
        translucent
        barStyle={'dark-content'}
      />
      <MapView
        provider={PROVIDER_GOOGLE} // remove if not using Google Maps
        style={styles.map}
        ref={mapRef}
        onRegionChange={onRegionChange}
        region={{
          latitude: region.latitude,
          longitude: region.longitude,
          latitudeDelta: 0.05,
          longitudeDelta: 0.05,
        }}>
        {venueSet?.results?.map((marker, index) => {
    
          return (
            <Marker
              key={index}
              coordinate={{latitude: marker.lat, longitude: marker.lon}}>
        
             
            
            </Marker>
          );
        })}
      </MapView>
      <View
        style={{
          position: 'absolute',
          width: '100%',
          // bottom: responsiveFontSize(5),
        }}>
        <Animated.FlatList
          bounces={false}
          decelerationRate={Platform.OS === 'ios' ? 0 : 0.98}
          renderToHardwareTextureAndroid
          contentContainerStyle={{alignItems: 'center'}}
          snapToInterval={ITEM_SIZE}
          snapToAlignment="start"
          horizontal
          ref={flatListRef}
          pagingEnabled={true}
          onScroll={Animated.event(
            [{nativeEvent: {contentOffset: {x: scrollX}}}],
            {useNativeDriver: false},
          )}
          scrollEventThrottle={16}
          showsHorizontalScrollIndicator={false}
          renderItem={renderItem}
          viewabilityConfig={{
            minimumViewTime: 1000,
            itemVisiblePercentThreshold: 90,
          }}
          keyExtractor={(item, i) => item.id}
          data={venueSet?.results}
          onViewableItemsChanged={onScroll}
        />
      </View>
    </View>
  );
};

function mapStateToProps({venueSet}) {
  return {venueSet};
}

const styles = StyleSheet.create({
  container: {
    ...StyleSheet.absoluteFillObject,
    flex: 1,
    justifyContent: 'flex-end',
    alignItems: 'center',
  },
  map: {
    ...StyleSheet.absoluteFillObject,
  },

  cardImage: {
    flex: 3,
    width: '100%',
    height: '100%',
    alignSelf: 'center',
  },
  textContent: {
    flex: 2,
    padding: 10,
  },
  cardtitle: {
    fontSize: 12,
    // marginTop: 5,
    fontWeight: 'bold',
  },
  cardDescription: {
    fontSize: 12,
    color: '#444',
  },
  markerWrap: {
    alignItems: 'center',
    justifyContent: 'center',
    width: 50,
    height: 50,
  },
  marker: {
    width: 30,
    height: 30,
  },
  button: {
    alignItems: 'center',
    marginTop: 5,
  },
  signIn: {
    width: '100%',
    padding: 5,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 3,
  },
  textSign: {
    fontSize: 14,
    fontWeight: 'bold',
  },
});

export default connect(mapStateToProps, actions)(MapScreen);
